import * as cb from '@aws-cdk/aws-codebuild';
import * as cp from '@aws-cdk/aws-codepipeline';
import { Construct } from 'constructs';
import { Step } from '../blueprint';
import { Pipeline } from '../main/pipeline';
import { CodePipelineEngine, CodePipelineEngineProps } from './codepipeline-engine';


/**
 * Properties for a `CodePipeline`
 */
export interface CodePipelineProps extends CodePipelineEngineProps {
  /**
   * The build step that produces the CDK Cloud Assembly
   *
   * The primary output of this step needs to be the `cdk.out` directory
   * generated by the `cdk synth` command.
   *
   * If you use `SynthStep`, the output directory will automatically be
   * configured correctly; if you use a different kind of `Step`, you
   * may need to configure it explicitly.
   */
  readonly synth: Step;
}

/**
 * A CDK Pipeline that uses CodePipeline to deploy CDK apps
 *
 * This is a `Pipeline` with its `engine` property set to
 * `CodePipelineEngine`, and exists for nicer ergonomics for
 * users that don't need to switch out engines.
 */
export class CodePipeline extends Pipeline {
  private readonly _engine: CodePipelineEngine;

  constructor(scope: Construct, id: string, props: CodePipelineProps) {
    const engine = new CodePipelineEngine(props);

    super(scope, id, {
      synth: props.synth,
      engine,
    });

    this._engine = engine;
  }

  /**
   * The CodeBuild project that performs the Synth
   *
   * Only available after the pipeline has been built.
   */
  public get synthProject(): cb.IProject {
    return this._engine.synthProject;
  }

  /**
   * The CodePipeline pipeline that deploys the CDK app
   *
   * Only available after the pipeline has been built.
   */
  public get pipeline(): cp.Pipeline {
    return this._engine.pipeline;
  }
}