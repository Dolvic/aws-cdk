import * as cdk from '@aws-cdk/core';
import { Step } from './step';
import { AddStageOpts, Wave } from './wave';

/**
 * Construction properties for a `Blueprint`.
 */
export interface BlueprintProps {
  /**
   * The build step that produces the CDK Cloud Assembly
   *
   * The primary output of this step needs to be the `cdk.out` directory
   * generated by the `cdk synth` command.
   *
   * If you use `SynthStep`, the output directory will automatically be
   * configured correctly; if you use a different kind of `Step`, you
   * may need to configure it explicitly.
   */
  readonly synth: Step;
}

/**
 * A description of a set of application deployments
 *
 * You don't need to create an instance of `Blueprint` yourself;
 * one will be automatically created for you when you instantiate
 * a `Pipeline`.
 */
export class Blueprint {
  /**
   * The build step that produces the CDK Cloud Assembly
   */
  public readonly synth: Step;

  /**
   * The waves in this pipeline
   */
  public readonly waves: Wave[];

  constructor(props: BlueprintProps) {
    this.synth = props.synth;
    this.waves = [];
  }

  /**
   * Add a Wave to the pipeline, for deploying multiple Stages in parallel
   *
   * Use the return object of this method to deploy multiple stages in parallel.
   *
   * Example:
   *
   * ```ts
   * const wave = pipeline.addWave('MyWave');
   * wave.addStage(new MyStage('Stage1', ...));
   * wave.addStage(new MyStage('Stage2', ...));
   * ```
   */
  public addWave(id: string, options: WaveOptions = {}) {
    const wave = new Wave(id, options);
    this.waves.push(wave);
    return wave;
  }

  /**
   * Deploy a single Stage by itself
   *
   * Add a Stage to the pipeline, to be deployed in sequence with other
   * Stages added to the pipeline. All Stacks in the stage will be deployed
   * in an order automatically determined by their relative dependencies.
   */
  public addStage(stage: cdk.Stage, options: AddStageOpts = {}) {
    return this.addWave(stage.stageName).addStage(stage, options);
  }
}

/**
 * Options to pass to `addWave`
 */
export interface WaveOptions {
  /**
   * Additional steps to run before any of the stages in the wave
   *
   * @default - No additional steps
   */
  readonly pre?: Step[];

  /**
   * Additional steps to run after all of the stages in the wave
   *
   * @default - No additional steps
   */
  readonly post?: Step[];
}